import React, { useState } from 'react';
import { Upload, AlertCircle, Activity, ImageIcon, ZoomIn, RotateCw, Grid, Download, History } from 'lucide-react';
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';

const MedicalImageAnalysis = () => {
  const [selectedImage, setSelectedImage] = useState(null);
  const [analysis, setAnalysis] = useState(null);
  const [loading, setLoading] = useState(false);
  const [zoomLevel, setZoomLevel] = useState(1);
  const [rotation, setRotation] = useState(0);
  const [analysisHistory, setAnalysisHistory] = useState([]);
  const [selectedRegion, setSelectedRegion] = useState(null);
  const [brightness, setBrightness] = useState(100);
  const [contrast, setContrast] = useState(100);

  // Simulate AI analysis with multiple detection types
  const analyzeImage = () => {
    setLoading(true);
    setTimeout(() => {
      const newAnalysis = {
        id: Date.now(),
        timestamp: new Date().toISOString(),
        confidence: 89,
        findings: [
          { 
            area: "Upper Right Quadrant", 
            observation: "Potential abnormality detected", 
            confidence: 89,
            type: "Anomaly",
            risk_level: "Medium",
            measurements: {
              size: "2.3cm x 1.8cm",
              density: "High"
            }
          },
          { 
            area: "Lower Left Quadrant", 
            observation: "Normal tissue structure", 
            confidence: 95,
            type: "Normal",
            risk_level: "Low",
            measurements: {
              density: "Normal"
            }
          }
        ],
        recommendations: "Further clinical correlation recommended",
        analysis_types: ["Anomaly Detection", "Tissue Density", "Structure Analysis"]
      };
      setAnalysis(newAnalysis);
      setAnalysisHistory(prev => [...prev, newAnalysis]);
      setLoading(false);
    }, 2000);
  };

  const handleImageUpload = (event) => {
    const file = event.target.files[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = (e) => {
        setSelectedImage(e.target.result);
        setAnalysis(null);
        resetImageControls();
      };
      reader.readAsDataURL(file);
    }
  };

  const resetImageControls = () => {
    setZoomLevel(1);
    setRotation(0);
    setBrightness(100);
    setContrast(100);
  };

  const handleDownload = () => {
    if (analysis) {
      const reportData = {
        analysis,
        imageSettings: {
          brightness,
          contrast,
          rotation
        },
        exportDate: new Date().toISOString()
      };
      const blob = new Blob([JSON.stringify(reportData, null, 2)], { type: 'application/json' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `medical-analysis-report-${Date.now()}.json`;
      a.click();
      URL.revokeObjectURL(url);
    }
  };

  return (
    <div className="max-w-6xl mx-auto p-6 space-y-6">
      <div className="text-center space-y-4">
        <h1 className="text-3xl font-bold">Advanced Medical Image Analysis</h1>
        <p className="text-gray-600">Professional-grade medical image analysis with AI-powered detection</p>
      </div>

      <Alert>
        <AlertCircle className="h-4 w-4" />
        <AlertTitle>Important Medical Disclaimer</AlertTitle>
        <AlertDescription>
          This tool is for demonstration purposes only. All medical decisions should be made by qualified healthcare professionals. AI analysis should be used as a supporting tool, not as a primary diagnostic method.
        </AlertDescription>
      </Alert>

      <div className="grid md:grid-cols-2 gap-6">
        <div className="space-y-4">
          {/* Image Upload Section */}
          <div className="border-2 border-dashed rounded-lg p-6 text-center space-y-4">
            <div className="flex justify-center">
              <Upload className="h-12 w-12 text-gray-400" />
            </div>
            <div>
              <label className="bg-blue-500 text-white px-4 py-2 rounded-lg cursor-pointer hover:bg-blue-600">
                Upload Image
                <input
                  type="file"
                  className="hidden"
                  accept="image/*"
                  onChange={handleImageUpload}
                />
              </label>
            </div>
            <p className="text-sm text-gray-500">Supported formats: JPEG, PNG, DICOM</p>
          </div>

          {selectedImage && (
            <div className="space-y-4">
              {/* Image Viewer with Controls */}
              <div className="border rounded-lg p-4">
                <div className="relative">
                  <img
                    src={selectedImage}
                    alt="Medical scan"
                    className="w-full h-64 object-contain"
                    style={{
                      transform: `scale(${zoomLevel}) rotate(${rotation}deg)`,
                      filter: `brightness(${brightness}%) contrast(${contrast}%)`
                    }}
                  />
                  {selectedRegion && (
                    <div className="absolute border-2 border-blue-500 bg-blue-500/20"
                         style={{
                           top: selectedRegion.top,
                           left: selectedRegion.left,
                           width: selectedRegion.width,
                           height: selectedRegion.height
                         }}
                    />
                  )}
                </div>
                
                {/* Image Controls */}
                <div className="mt-4 space-y-3">
                  <div className="flex justify-between items-center gap-4">
                    <div className="flex items-center gap-2">
                      <ZoomIn className="h-4 w-4" />
                      <input
                        type="range"
                        min="0.5"
                        max="3"
                        step="0.1"
                        value={zoomLevel}
                        onChange={(e) => setZoomLevel(e.target.value)}
                        className="w-24"
                      />
                    </div>
                    <div className="flex items-center gap-2">
                      <RotateCw className="h-4 w-4" />
                      <button
                        onClick={() => setRotation(r => (r + 90) % 360)}
                        className="p-1 hover:bg-gray-100 rounded"
                      >
                        Rotate
                      </button>
                    </div>
                  </div>
                  
                  <div className="space-y-2">
                    <div className="flex items-center gap-2">
                      <span className="text-sm w-16">Brightness</span>
                      <input
                        type="range"
                        min="50"
                        max="150"
                        value={brightness}
                        onChange={(e) => setBrightness(e.target.value)}
                        className="flex-1"
                      />
                    </div>
                    <div className="flex items-center gap-2">
                      <span className="text-sm w-16">Contrast</span>
                      <input
                        type="range"
                        min="50"
                        max="150"
                        value={contrast}
                        onChange={(e) => setContrast(e.target.value)}
                        className="flex-1"
                      />
                    </div>
                  </div>
                </div>
              </div>

              {/* Analysis Button */}
              <button
                onClick={analyzeImage}
                disabled={loading}
                className="w-full bg-green-500 text-white px-4 py-2 rounded-lg hover:bg-green-600 disabled:bg-gray-400"
              >
                {loading ? "Analyzing..." : "Analyze Image"}
              </button>
            </div>
          )}
        </div>

        <div className="border rounded-lg p-6 space-y-4">
          {/* Analysis Results Section */}
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-2">
              <Activity className="h-6 w-6 text-blue-500" />
              <h2 className="text-xl font-semibold">Analysis Results</h2>
            </div>
            {analysis && (
              <button
                onClick={handleDownload}
                className="flex items-center gap-2 text-sm text-blue-500 hover:text-blue-600"
              >
                <Download className="h-4 w-4" />
                Export Report
              </button>
            )}
          </div>

          {!analysis && !loading && (
            <div className="text-center text-gray-500 py-8">
              <ImageIcon className="h-12 w-12 mx-auto mb-4" />
              <p>Upload and analyze an image to see results</p>
            </div>
          )}

          {loading && (
            <div className="text-center py-8">
              <div className="animate-pulse space-y-4">
                <div className="h-4 bg-gray-200 rounded w-3/4 mx-auto"></div>
                <div className="h-4 bg-gray-200 rounded w-1/2 mx-auto"></div>
              </div>
            </div>
          )}

          {analysis && (
            <div className="space-y-4">
              {/* Analysis Types */}
              <div className="flex flex-wrap gap-2">
                {analysis.analysis_types.map((type, index) => (
                  <span key={index} className="px-2 py-1 bg-blue-100 text-blue-800 rounded-full text-sm">
                    {type}
                  </span>
                ))}
              </div>

              {/* Confidence Score */}
              <div className="bg-blue-50 p-4 rounded-lg">
                <h3 className="font-semibold">Overall Confidence Score</h3>
                <div className="flex items-center space-x-2">
                  <div className="w-full bg-gray-200 rounded-full h-2.5">
                    <div
                      className="bg-blue-500 h-2.5 rounded-full"
                      style={{ width: `${analysis.confidence}%` }}
                    ></div>
                  </div>
                  <span className="text-sm">{analysis.confidence}%</span>
                </div>
              </div>

              {/* Detailed Findings */}
              <div>
                <h3 className="font-semibold mb-2">Detailed Findings</h3>
                {analysis.findings.map((finding, index) => (
                  <div key={index} className="bg-gray-50 p-3 rounded-lg mb-2">
                    <div className="flex justify-between items-start">
                      <div>
                        <p className="font-medium">{finding.area}</p>
                        <p className="text-sm text-gray-600">{finding.observation}</p>
                      </div>
                      <span className={`px-2 py-1 rounded-full text-xs ${
                        finding.risk_level === "Low" ? "bg-green-100 text-green-800" :
                        finding.risk_level === "Medium" ? "bg-yellow-100 text-yellow-800" :
                        "bg-red-100 text-red-800"
                      }`}>
                        {finding.risk_level} Risk
                      </span>
                    </div>
                    <div className="mt-2 text-sm">
                      <p className="text-gray-600">Type: {finding.type}</p>
                      {finding.measurements.size && (
                        <p className="text-gray-600">Size: {finding.measurements.size}</p>
                      )}
                      <p className="text-gray-600">Density: {finding.measurements.density}</p>
                      <p className="text-xs text-gray-500">Confidence: {finding.confidence}%</p>
                    </div>
                  </div>
                ))}
              </div>

              {/* Recommendations */}
              <div>
                <h3 className="font-semibold">Recommendations</h3>
                <p className="text-sm text-gray-600">{analysis.recommendations}</p>
              </div>

              {/* Analysis History */}
              {analysisHistory.length > 1 && (
                <div className="mt-4">
                  <div className="flex items-center gap-2 mb-2">
                    <History className="h-4 w-4" />
                    <h3 className="font-semibold">Analysis History</h3>
                  </div>
                  <div className="text-sm text-gray-600">
                    {analysisHistory.length} analyses performed
                  </div>
                </div>
              )}
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default MedicalImageAnalysis;
